@inject Blazored.LocalStorage.ILocalStorageService localStorage
<div class="row">
    <div class="col-6 col-md-6 text-end">Umiejanie</div>
    <progress max="60" value="@seconds" />
</div>
<div class="row">
    <div class="col-6 col-md-6 text-end">Naumiejane:</div>
    <div class="col-6 col-md-6">@PrintHelper.PrintTime(subject.TimeUsed)</div>
</div>
<div class="row">
    <div class="col-6 col-md-6 text-end">Żeby się naumiejać :</div>
    <div class="col-6 col-md-6">@PrintHelper.PrintTime(subject.TimeForSubject.Subtract(subject.TimeUsed))</div>
</div>
<button class="btn btn-primary" @onclick="ToogleLearning">@toogleButtonText</button>


@code {
    [Parameter] public Subjects.Subject subject { get; set; }
    [Parameter] public Subjects.SubjectAction Edit { get; set; }
    private int seconds = 0;
    private bool learning = true;
    private string toogleButtonText = "Stop";
    private DateTime startTime;
    
    protected override void OnInitialized()
    {
        
        ProceedLearning();
        base.OnInitialized();
    }
    
    
    
    public async Task ProceedLearning()
    {
        if(!learning)
            return;

        subject.Learnings.Add(new Subjects.Learning());
        var alreadyLearned = new TimeSpan(subject.TimeUsed.Ticks);
        startTime = DateTime.Now;
        while (learning)
        {
            var timePased = DateTime.Now.TimeOfDay.Subtract(startTime.TimeOfDay);
            seconds = timePased.Seconds;
            subject.TimeUsed = alreadyLearned.Add(timePased);
            UpdateCurrentLearning(subject);
            await Edit(subject);
            StateHasChanged();
            await Task.Delay(1000);
        }
        return;
    }

    private void UpdateCurrentLearning(Subjects.Subject subject)
    {
        var currentLearning = subject.Learnings.Last();
        currentLearning.StartDate = startTime;
        currentLearning.EndDate = DateTime.Now;
    }

    private void ToogleLearning()
    {
        learning = learning ? false : true;
        toogleButtonText = learning ? "Stop" : "Start"; 
        ProceedLearning();
        StateHasChanged(); 
    }
}