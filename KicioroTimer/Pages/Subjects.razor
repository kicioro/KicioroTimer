@page "/subjects"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Przedmioty</PageTitle>

<h1>Lista przedmiotów</h1>

<Modal @ref="modal" />
<button class="btn btn-primary" @onclick="ShowAddSubjectModalComponent">Dodaj</button>
@if (subjects == null)
{
    <p>
        <em>Dodaj pierwszy przedmiot</em>
    </p>
}
else
{
   
    <table class="table">
        <thead>
        <tr>
            <th>Tytuł</th>
            <th>Więcej</th>
            <th>Nauka start</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var subject in subjects)
        {
            <tr>
                <td>@string.Format("{0}({1}/{2})", subject.Title, subject.ExamDate.ToString("dd"), PrintHelper.PrintHours(subject.TimeUsed))</td>
                <td><button class="btn btn-primary" @onclick="((args) => ShowSubjectModalComponent(args, subject.Id))">Więcej</button></td>
                <td><button class="btn btn-primary" @onclick="((args) => ShowLearnSubjectModalComponent(args, subject.Id))">Start</button></td>
                

            </tr>
        }
        </tbody>
    </table>
}

@code {
    
    private Modal modal = default!;
    private async Task ShowSubjectModalComponent(EventArgs args, Guid id)
    {
        var subject = subjects.FirstOrDefault(x => x.Id == id);
        var parameters = new Dictionary<string, object>();
        SubjectAction delete = DeleteSubject;
        parameters.Add("Delete", delete);
        parameters.Add("subject", subject);
        await modal.ShowAsync<SubjectModalComponent>(title: subject.Title, parameters: parameters);
    }

    private async Task ShowLearnSubjectModalComponent(EventArgs args, Guid id)
    {
        var subject = subjects.FirstOrDefault(x => x.Id == id);
        var parameters = new Dictionary<string, object>();
        SubjectAction edit = EditSubject;
        parameters.Add("Edit", edit);
        parameters.Add("subject", subject);
        await modal.ShowAsync<LearnSubjectModalComponent>(title: subject.Title, parameters: parameters);
    }

    private async Task ShowAddSubjectModalComponent()
    {
        var parameters = new Dictionary<string, object>();
        SubjectAction save = SaveSubject;
        parameters.Add("Save", save);
        await modal.ShowAsync<AddSubjectModalComponent>(title: "nowy przedmiot", parameters: parameters);
    }
    
    private List<Subject>? subjects;

    protected override async Task OnInitializedAsync()
    {
        subjects = await localStorage.GetItemAsync<List<Subject>>("subjects");
        if (subjects == null)
            subjects = new List<Subject>();
    }

    public class Subject
    {
        public Guid Id { get; set; }
        
        public string? Title { get; set; }

        public TimeSpan TimeForSubject { get; set; }

        public int TimeForSubjectSet { get; set; }

        public TimeSpan TimeUsed { get; set; }

        public DateTime ExamDate { get; set; }
    }

    public delegate Task SubjectAction(Subject subject);

    public async Task SaveSubject(Subject subject)
    {
        Console.WriteLine(subject.Title);
        subjects.Add((new Subject()
        {
             Id = Guid.NewGuid(),
             Title = subject.Title,
             ExamDate = subject.ExamDate,
             TimeForSubject = TimeSpan.FromHours(subject.TimeForSubjectSet),
     
             TimeUsed = TimeSpan.FromHours(0)
        }));
        await modal.HideAsync();
        await localStorage.SetItemAsync("subjects", subjects);
        StateHasChanged();       
    }

    public async Task DeleteSubject(Subject subject)
    {
        Console.WriteLine(subject.Title);
        var subjectToDelete = subjects.FirstOrDefault(x => x.Id == subject.Id);
        subjects.Remove(subjectToDelete);
        await modal.HideAsync();
        await localStorage.SetItemAsync("subjects", subjects);
        StateHasChanged();       
    }

    public async Task EditSubject(Subject subject)
    {
        Console.WriteLine(subject.Title);
        var subjectToEdit = subjects.FirstOrDefault(x => x.Id == subject.Id);
        subjectToEdit = subject;
        await localStorage.SetItemAsync("subjects", subjects);      
    }


}


